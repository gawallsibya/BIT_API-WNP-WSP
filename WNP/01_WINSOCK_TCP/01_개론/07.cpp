/******************************************************************

  Chapter 1. À©¼Ó¿¡ ´ëÇÑ ¼Ò°³ 

	1) µ¥ÀÌÅÍ Àü¼Û  
	2) µ¥ÀÌÅÍ ¼ö½Å 
	3) example(Àü¼Û)
	4) example(¼ö½Å)
******************************************************************/



//---------------------------------------------------------------- 
//   0) µ¥ÀÌÅÍ Àü¼Û  
//---------------------------------------------------------------- 
/*
     *)µ¥ÀÌÅÍ Àü¼Û ÇÔ¼ö 
     µ¥ÀÌÅÍ¸¦ º¸³»´Â ÇÔ¼ö	: send()
	 µ¥ÀÌÅÍ¸¦ ¹Ş´Â ÇÔ¼ö		: recv()
	 È®Àå ÇÔ¼ö  : WSA*(*)

    []  ¼Û½Å ¹öÆÛ, ¼ö½Å ¹öÆÛ 
	°¢°¢ ÀÚ½Å°ú »ó´ë¹æÀÇ IP ÁÖ¼Ò¿Í PORT ¹øÈ£ 
	¼Û¼ö½Å ¹öÆÛ°¡ Á¸Àç 
	¼Û½Å ¹öÆÛ(send buffer) µ¥ÀÌÅÍ¸¦ Àü¼ÛÇÏ±â Àü¿¡ ÀÓ½Ã·Î ÀúÀåÇØµÎ´Â ¿µ¿ª
	¼ö½Å ¹öÆÛ(receive buffer) ¹ŞÀº µ¥ÀÌÅÍ¸¦ ¾ÖÇÃ¸®ÄÉÀÌ¼ÇÀÌ Ã³¸®ÇÏ±â Àü±î
	      Áö ÀÓ½Ã·Î ÀúÀåÇØ µÎ´Â ¿µ¿ª 

    => µÑÀ» ÇÕÃÄ¼­ ¼ÒÄÏ ¹öÆÛ(socket buffer)¶ó ÇÑ´Ù.
	send()/recv()´Â ¼ÒÄÏÀ» ÅëÇØ °£Á¢ÀûÀ¸·Î ¼ÒÄÏ ¹öÆÛ¸¦ Á¢±ÙÇÒ ¼ö ÀÖµµ·Ï
	 ¸¸µç ÇÔ¼ö¶ó º¼ ¼ö ÀÖ´Ù.
*/



//---------------------------------------------------------------- 
//   1) µ¥ÀÌÅÍ Àü¼Û  
//---------------------------------------------------------------- 
/*
	send & WSASend

	SOCKET_ERROR ¸¦ ¸®ÅÏ => WSAGetLastError() È£Ãâ ÇÏ¿© ¿¡·¯ ¿øÀÎ È®ÀÎ

    ÁÖ·Î ¹ß»ıµÇ´Â ¿¡·¯ 
		WSAECONNABORTED & WSAECONNRESET
		Å¸ÀÓ¾Æ¿ôÀÌ³ª »ó´ë¹æÀÇ Á¢¼Ó Á¾·á¿¡ ÀÇÇØ ¹ß»ı 

	int send(
		SOCKET			s,
		const char FAR *buf,
		int				len,
		int				flags
	);

	1ÀÎÀÚ) µ¥ÀÌÅÍ¸¦ Àü¼ÛÇÏ±æ ¿øÇÏ´Â ¿¬°áµÈ ¼ÒÄÏ
	2ÀÎÀÚ) Àü¼ÛÇÒ µ¥ÀÌÅÍ°¡ ´ã±ä charÇü ¹öÆÛ 
	3ÀÎÀÚ) lenÀº Àü¼ÛÇÒ µ¥ÀÌÅÍÀÇ Å©±â 
	4ÀÎÀÚ) 0

	¸®ÅÏ°ª : ¼º°ø½Ã Àü¼ÛµÈ ¾çÀÌ ¸®ÅÏ 
			 ½ÇÆĞ½Ã SOCKET_ERROR ¸®ÅÏ 
				

	int WSASend(
		SOCKET								s,
		LPWSABUF							lpBuffers,
		DWORD								dwBufferCount,
		LPDWORD								lpNumberOfBytesSent,
		DWORD								dwFlags,
		LPWSAOVERLAPPED						lpOverlapped,
		LPWSAOVERLPAPPED_COMPLETION_ROUTINE	lpCompletionRoutine

	);
	
	1ÀÎÀÚ) µ¥ÀÌÅÍ¸¦ Àü¼ÛÇÏ±æ ¿øÇÏ´Â ¿¬°áµÈ ¼ÒÄÏ
	2ÀÎÀÚ) ÇÏ³ª ÀÌ»óÀÇ ±¸Á¶Ã¼ WSABufferÀÇ Æ÷ÀÎÅÍ
			ÇÏ³ªÀÇ ±¸Á¶Ã¼ Æ÷ÀÎÅÍ³ª ±¸Á¶Ã¼ ¹è¿­ÀÇ Æ÷ÀÎÅÍ °¡´É 
	3ÀÎÀÚ) ±¸Á¶Ã¼ WSABUFÀÇ °³¼ö 
	4ÀÎÀÚ) WSASend¸¦ ÅëÇØ Àü¼ÛµÈ µ¥ÀÌÅÍ ÃÑ Å©±â ¸®ÅÏ 
	5ÀÎÀÚ) 0
	6ÀÎÀÚ) Æ¯¼ö ÀÎÀÚ(ºñµ¿±â)
	7ÀÎÀÚ) Æ¯¼ö ÀÎÀÚ(ºñµ¿±â)

   
	¸®ÅÏ°ª : ¼º°ø½Ã 0 
			 ½ÇÆĞ½Ã SOCKET_ERROR ¸®ÅÏ 



    *) Ã¹¹øÂ° ÀÎÀÚ·Î »ç¿ëÇÑ ¼ÒÄÏÀÇ Æ¯¼º¿¡ µû¶ó µÎ Á¾·ùÀÇ ¼º°øÀûÀÎ 
	   ¸®ÅÏÀ»  ÇÑ´Ù.
	   1) ºí·ÎÅ·(blocking) ¼ÒÄÏ
	      Áö±İ±îÁö »ı¼ºÇÑ ¸ğµç ¼ÒÄÏÀÌ ¿©±â¿¡ ÇØ´ç
		    send() ÇÔ¼ö È£­‹
			¼Û½Å ¹öÆÛÀÇ ¿©À¯ °ø°£ÀÌ ¼¼ ¹øÂ° ÀÎÀÚº¸´Ù ÀûÀ» °æ¿ì 
			 ÇØ´ç ÇÁ·Î¼¼½º´Â ´ë±â»óÅÂ(wait state)°¡ µÈ´Ù.
			¼Û½Å ¹öÆÛ¿¡ ÃæºĞÇÑ °ø°£ÀÌ »ı±â¸é ÇÁ·Î¼¼½º´Â ±ú¾î³ª°í, 
			len Å©±â¸¸Å­ µ¥ÀÌÅÍ º¹»ç°¡ ÀÌ·ç¾î ÁøÈÄ 
			send() ÇÔ¼ö°¡ ¸®ÅÏµÈ´Ù.
			¸®ÅÏ°ªÀº len() °ú µ¿ÀÏÇÏ´Ù.

        2) ³Íºí·ÎÅ·(non blocking) ¼ÒÄÏ
		  ioctlsocket() ºí·ÎÅ· ¼ÒÄÏÀ» ³Íºí·ÎÅ· ¼ÒÄÏÀ¸·Î ¹Ù²Ü ¼ö ÀÖ´Ù.
		   send() ÇÔ¼ö È£Ãâ
		   ¼Û½Å ¹öÆÛÀÇ ¿©À¯ °ø°£¸¸Å­ µ¥ÀÌÅÍ¸¦ º¹»ç ÇÑ ÈÄ 
		   ½ÇÁ¦ º¹»çÇÑ µ¥ÀÌÅÍ ¹ÙÀÌÆ® ¼ö¸¦ ¸®ÅÏ 
		   ÀÌ °æ¿ì send() ÇÔ¼öÀÇ ¸®ÅÏ°ªÀº ÃÖ¼Ò 1, ÃÖ´ë lenÀÌµÈ´Ù.

*/




//---------------------------------------------------------------- 
//   2) µ¥ÀÌÅÍ ¼ö½Å
//---------------------------------------------------------------- 
/*
	recv & WSARecv

	int recv(
		SOCKET		s,
		char FAR	*buf,
		int			len;
		int			flag
	);

    1ÀÎÀÚ) µ¥ÀÌÅÍ¸¦ ¼ö½ÅÇÒ ¼ÒÄÏ
	2ÀÎÀÚ) ¼ö½ÅµÈ µ¥ÀÌÅÍ¸¦ ´ãÀ» charÇü ¹öÆÛ
	3ÀÎÀÚ) ¼ö½ÅÇÏ±æ ¿øÇÏ´Â Å©±â or ¹öÆÛÀÇ Å©±â
	4ÀÎÀÚ) 0

	¸®ÅÏ°ª : ¼º°ø½Ã ¼ö½ÅµÈ ¾çÀÌ ¸®ÅÏ 
			 ½ÇÆĞ½Ã SOCKET_ERROR ¸®ÅÏ 



  int WSARecv(
		SOCKET								s,
		LPWSABUF							lpBuffers,
		DWORD								dwBufferCount,
		LPDWORD								lpNumberOfBytesRecv,
		DWORD								dwFlags,
		LPWSAOVERLAPPED						lpOverlapped,
		LPWSAOVERLPAPPED_COMPLETION_ROUTINE	lpCompletionRoutine
	);
	
	1ÀÎÀÚ) µ¥ÀÌÅÍ¸¦ ¼ö½ÅÇÏ±æ ¿øÇÏ´Â ¿¬°áµÈ ¼ÒÄÏ
	2ÀÎÀÚ) ÇÏ³ª ÀÌ»óÀÇ ±¸Á¶Ã¼ WSABufferÀÇ Æ÷ÀÎÅÍ
			ÇÏ³ªÀÇ ±¸Á¶Ã¼ Æ÷ÀÎÅÍ³ª ±¸Á¶Ã¼ ¹è¿­ÀÇ Æ÷ÀÎÅÍ °¡´É 
	3ÀÎÀÚ) ±¸Á¶Ã¼ WSABUFÀÇ °³¼ö 
	4ÀÎÀÚ) WSASend¸¦ ÅëÇØ ¼ö½ÅµÈ µ¥ÀÌÅÍ ÃÑ Å©±â ¸®ÅÏ 
	5ÀÎÀÚ) 0
	6ÀÎÀÚ) Æ¯¼ö ÀÎÀÚ(ºñµ¿±â)
	7ÀÎÀÚ) Æ¯¼ö ÀÎÀÚ(ºñµ¿±â)

   
	¸®ÅÏ°ª : ¼º°ø½Ã 0 
			 ½ÇÆĞ½Ã SOCKET_ERROR ¸®ÅÏ 
*/



//---------------------------------------------------------------- 
//	3) example(¼Û½Å)
//---------------------------------------------------------------- 
/*
	sendÇÔ¼ö¸¦ ÀÌ¿ëÇÏ¿© 2048¹ÙÀÌÆ®¸¸Å­ÀÇ µ¥ÀÌÅÍ ¼Û½Å

*/

/*
void main()
{


	// 1. À©¼Ó ¶óÀÌºê·¯¸® 2.2 ÃÊ±âÈ­
	// 2. ¿¬°áÀ» ±â´Ù¸®±â À§ÇÑ ¼ÒÄÏ »ı¼º
	// 3. bind ÇÏ±â À§ÇÑ ÁÖ¼Ò ÁöÁ¤ ¹× bind
	// 4. ¼­¹ö¿¡ ¿¬°á

	
	char	sendbuff[2048];
	int		nBytes		= 2048;

	//sendbuff¿¡ 2048¸¸Å­ÀÇ µ¥ÀÌÅÍ¸¦ Ã¤¿î´Ù.
	ret	= send(s, sendbuff, nBytes, 0 );

	// 5. ¼ÒÄÏ ÇØÁ¦
	// 6. À©¼Ó »ç¿ë Á¾·á 
}
	//  ½Ã½ºÅÛÀº ¼Û¼ö½ÅÀ» À§ÇÏ¿© Á¤ÇØÁø ¾ç¸¸Å­ÀÇ ¹öÆÛ¸¦
	    ¼ÒÄÏ¿¡ ÇÒ´çÇÏ±â ¶§¹®¿¡ ¸®ÅÏ°ª ret´Â Àü¼ÛµÈ ¾ç¸¸Å­ÀÇ 
	    ¼ıÀÚ·Î ¼³Á¤µÈ´Ù.

		ÀÌ °æ¿ì ³»ºÎ¹öÆÛ´Â µ¥ÀÌÅÍ°¡ ³×Æ®Ÿp ¼±·Î·Î ³ª°¡±â Àü
		±îÁö µ¥ÀÌÅÍ¸¦ º¸°üÇÏ´Â ¿ªÇÒÀ» ÇÑ´Ù. 
	
		TCP/IP¿¡¼­´Â À©µµ¿ì Å©±â¸¦ ÅëÇØ Àü¼ÛµÉ µ¥ÀÌÅÍ ¾çÀÌ 
		°áÁ¤µÈ´Ù.( TCP/IP window size)
		¼ö½ÅÃøÀÇ ³»ºÎ¹öÆÛ°¡ ²Ë Ã¤¿öÁ® ÀÖ´Ù¸é ÀÎµµ¿ì Å©±â´Â 0À¸·Î
		¼³Á¤µÇ°í, 0º¸´Ù Ä¿Áú¶§±îÁö µ¥ÀÌÅÍ Àü¼ÛÀÌ ºÒ°¡´ÉÇØÁø´Ù.
*/


/*
void main()
{

	
	char	sendbuff[2048];
	int		nBytes		= 2048,
			nLeft,
			idx;


	//sendbuff¿¡ 2048¸¸Å­ÀÇ µ¥ÀÌÅÍ¸¦ Ã¤¿î´Ù.

	nLeft	= nBytes;
	idx		= 0;

	while( nLeft > 0 )
	{
		ret	= send(s, &sendbuff[idx], nLeft, 0 );
		if( ret	== SOCKET_ERROR)
		{
			// error Handling
		}
		nLeft	-= ret;
		idx		+= ret;
	}

}
*/



//---------------------------------------------------------------- 
//	4) example(¼ö½Å)
//---------------------------------------------------------------- 


/*
void main()
{


	// 1. À©¼Ó ¶óÀÌºê·¯¸® 2.2 ÃÊ±âÈ­
	// 2. ¿¬°áÀ» ±â´Ù¸®±â À§ÇÑ ¼ÒÄÏ »ı¼º
	// 3. bind ÇÏ±â À§ÇÑ ÁÖ¼Ò ÁöÁ¤ ¹× bind
	// 4. ¼­¹ö¿¡ ¿¬°á

	
	char	recvbuff[2048];
	int		nBytes		= 2048;

	//sendbuff¿¡ 2048¸¸Å­ÀÇ µ¥ÀÌÅÍ¸¦ Ã¤¿î´Ù.
	ret	= recv(s, recvbuff, nBytes, 0 );

	// 5. ¼ÒÄÏ ÇØÁ¦
	// 6. À©¼Ó »ç¿ë Á¾·á 
}
*/


/*
void main()
{
	char	recvbuff[2048];
	int		nBytes		= 2048,
			nLeft,
			idx;

	//sendbuff¿¡ 2048¸¸Å­ÀÇ µ¥ÀÌÅÍ¸¦ Ã¤¿î´Ù.
	nLeft	= nBytes;
	idx		= 0;

	while( nLeft > 0 )
	{
		ret	= recv(s, &recvbuff[idx], nLeft, 0 );
		if( ret	== SOCKET_ERROR)
		{
			// error Handling
		}
		nLeft	-= ret;
		idx		+= ret;
	}
}


// ¸Ş½ÃÁö Å©±â°¡ °¡º¯ÀûÀÌ¶ó¸é??



  
//---------------------------------------------------------------- 
    *) ¾ÖÇÃ¸®ÄÉÀÌ¼Ç ÇÁ·ÎÅäÄİ°ú ¸Ş½ÃÁö ¼³°è
//---------------------------------------------------------------- 

   TCP ¼­¹ö/Å¬¶óÀÌ¾ğÆ®ÀÇ ±âº» ±¸Á¶´Â Á¤ÇüÈ­µÇ¾î ÀÖ´Ù.
   µû¶ó¼­ ÀÏ´Ü °¢ ÇÔ¼öÀÇ ÀÇ¹Ì¸¦ ÀÌÇØÇÏ°í ³ª¸é »À´ë°¡ µÇ´Â ÄÚµå´Â 
   ±×´ë·Î º¹»çÇØ¼­ »ç¿ëÇÒ ¼ö ÀÖ´Ù.

   ±×·¸´Ù¸é ¾ÖÇÃ¸®ÄÉÀÌ¼ÇÀÇ °íÀ¯ÇÑ ±â´ÉÀ» °áÁ¤ÇÏ´Â ºÎºĞÀº ¾îµğÀÏ±î?
   ¹Ù·Î µ¥ÀÌÅÍ Ã³¸® ºÎºĞÀÌ´Ù. 
    
   °£´ÜÇÑ ÆÄÀÏ Àü¼Û ÇÁ·Î±×·¥À» ÀÛ¼ºÇÏ¸é¼­ ¾ÖÇÃ¸®ÄÉÀÌ¼Ç ÇÁ·ÎÅäÄİÀÇ 
   °³³ä°ú ¸Ş½ÃÁö ¼³°è½Ã ÁÖÀÇÁ¡À» È®ÀÎÇØ º¸ÀÚ. 

1) ¾ÖÇÃ¸®ÄÉÀÌ¼Ç ÇÁ·ÎÅäÄİ
   ¾ÖÇÃ¸®ÄÉÀÌ¼Ç ¼öÁØ(application-level) ¿¡¼­ ÁÖ°í ¹Ş´Â µ¥ÀÌÅÍÀÇ Çü½Ä°ú
   ÀÇ¹Ì ±×¸®°í Ã³¸® ¹æ½Ä µîÀ» Á¤ÀÇÇÑ ÇÁ·ÎÅäÄİÀÌ´Ù.

   ¾ÖÇÃ¸®ÄÉÀÌ¼Ç ÇÁ·ÎÅäÄİÀÇ ±âº»Àº ÁÖ°í¹ŞÀ» ¸Ş½ÃÁö Çü½ÄÀ» Á¤ÇÏ´Â °ÍÀÌ´Ù.
   ¸¸¾à ³×Æ®¿öÅ©¸¦ ÅëÇØ ÀÚ½ÅÀÇ È­¸é°ú »ó´ë¹æ È­¸éÀ» µ¿½Ã¿¡ ±×¸²À» ±×¸±
   ¼ö ÀÖ´Â ±â´ÉÀ» Á¦°øÇÏ·Á¸é ¾î¶°ÇÑ µ¥ÀÌÅÍ¸¦ ÁÖ°í ¹Ş¾Æ¾ß ÇÒ±î?
   - ¼±ÀÇ ½ÃÀÛ°ú ³¡Á¡ 
   - µÎ²²¿Í »ö»ó 
   => ±¸Á¶Ã¼·Î Ç¥ÇöÇØ º¸ÀÚ.
      struct DrawMessage1
	  {
		int x1, y1;		// ¼±ÀÇ ½ÃÀÛÁ¡
		int x2, y2;		// ¼±ÀÇ ³¡Á¡
		int width;		// ¼±ÀÇ µÎ²²
		int color;		// ¼± »ö»ó
	  };

    ¸¸¾à ¿ø ±×¸®±â ±â´ÉÀ» Ãß°¡ÇÑ´Ù¸é ??
	- ¿øÀÇ Áß½É ÁÂÇ¥
	- ¿øÀÇ ¹İÁö¸§
	- ³»ºÎ »ö»ó
	- µÎ²² »ö»ó
	=> ±¸Á¶Ã¼·Î Ç¥ÇöÇØ º¸ÀÚ
	struct DrawMessage2
	{
		int x1, y1;	// ¿øÀÇ Áß½É ÁÂÇ¥
		int r;		// ¿øÀÇ ¹İÁö¸§
		int fillcolor;	// ³»ºÎ »ö»ó
		int width;		// ¼± µÎ²²
		int color;		// ¼± »ö»ó
	};

    ÀÌ¿Í °°ÀÌ Á¤ÀÇÇÏ¸é ³×Æ®¿öÅ©¸¦ ÅëÇØ µ¥ÀÌÅÍ¸¦ ¹ŞÀº ÂÊ¿¡¼­´Â ¾î¶² 
	Å¸ÀÔÀÎÁö¸¦ ±¸ºĞÇÒ ¼ö ¾øÀ½À¸·Î ÃÖÁ¾ÀûÀ¸·Î ¾Æ·¡¿Í °°ÀÌ ÇÊµå¸¦
	Àû¿ë½ÃÄÑÇá ÇÑ´Ù.
      struct DrawMessage1
	  {
		int type;		/// = LINE
		int x1, y1;		// ¼±ÀÇ ½ÃÀÛÁ¡
		int x2, y2;		// ¼±ÀÇ ³¡Á¡
		int width;		// ¼±ÀÇ µÎ²²
		int color;		// ¼± »ö»ó
	  };
	struct DrawMessage2
	{
		int type;		// = CIRCLE
		int x1, y1;	// ¿øÀÇ Áß½É ÁÂÇ¥
		int r;		// ¿øÀÇ ¹İÁö¸§
		int fillcolor;	// ³»ºÎ »ö»ó
		int width;		// ¼± µÎ²²
		int color;		// ¼± »ö»ó
	};


2) ¸Ş½ÃÁö ¼³°è

   (1)
   Åë½Å ¾ç´ÜÀÌ ÁÖ°í¹ŞÀ» µ¥ÀÌÅÍ ¿ä¼Ò¸¦ ±¸Á¶Ã¼·Î Á¤ÀÇÇÏ´Â °ÍÀ¸·Î´Â
   ÃæºĞÇÏÁö ¾Ê´Ù.

   (2)
   ¸Ş½ÃÁö ¼³°è½Ã °í·ÁÇØ¾ß ÇÒ »çÇ×À» ¾Ë¾Æº¸ÀÚ
   * °æ°è±¸ºĞÀÌ ¾ø´Â TCP ÇÁ·ÎÅäÄİÀ» »ç¿ëÇÒ °æ¿ì , ¾ÖÇÃ¸®ÄÉÀÌ¼Ç¿¡¼­
     ÀÌºÎºĞÀÇ Ã³¸®¸¦ ÇØ¾ß ÇÑ´Ù. ¾Æ·¡ÀÇ 3°¡Áö ¹æ¹ıÀ» È®ÀÎÇØ º¸ÀÚ.

  [ ¼Û½ÅÀÚ  ]
     - Ç×»ó °íÁ¤ ±æÀÌ µ¥ÀÌÅÍ¸¦ º¸³½´Ù.
	 - °æ°è ±¸ºĞÀ» À§ÇØ Æ¯º°ÇÑ Ç¥½Ã(EOR, End of Recored)¸¦ »ğÀÔÇÑ´Ù.
	 - º¸³¾ µ¥ÀÌÅÍÀÇ ±æÀÌ¸¦ °íÁ¤ ±æÀÌ µ¥ÀÌÅÍ·Î º¸³½ ÈÄ, 
	   °¡º¯ ±æÀÌ µ¥ÀÌÅÍ¸¦ ÀÌ¾î¼­ º¸³½´Ù.
  
   [ ¼ö½ÅÀÚ ]
      - Ç×»ó °íÁ¤ ±æÀÌ µ¥ÀÌÅÍ¸¦ ¹Ş´Â´Ù.
	  - EORÀÌ ³ª¿Ã¶§±îÁö µ¥ÀÌÅÍ¸¦ ÀĞÀº ÈÄ Ã³¸®ÇÑ´Ù.
	  - °íÁ¤ ±æÀÌ µ¥ÀÌÅÍ¸¦ ÀĞ¾î µÚµû¶ó¿Ã µ¥ÀÌÅÍÀÇ ±æÀÌ¸¦ ¾Ë¾Æ³½´Ù.
	    ÀÌ ±æÀÌ¸¸Å­ °¡º¯ ±æÀÌ µ¥ÀÌÅÍ¸¦ ÀĞ¾î Ã³¸®ÇÑ´Ù.


    ¹æ¹ı 1)
	¼Û½ÅÀÚ¿Í ¼ö½ÅÀÚ°¡ Ã³¸® ÇÏ±â¿¡ °¡Àå ÆíÇÑ ¹æ¹ıÀÌ´Ù.
	ÇÏÁö¸¸ °¡Àå ±ä µ¥ÀÌÅÍ¸¦ °íÁ¤ ±æÀÌ·Î Á¤ÇØ¾ß ÇÏ´Â ¹®Á¦°¡ ÀÖ´Ù.
	»ó´ëÀûÀ¸·Î ±æÀÌ°¡ ÂªÀº µ¥ÀÌÅÍ¸¦ ÁÖ°í ¹ŞÀ» °æ¿ì ³¶ºñµÇ´Â ºÎºĞÀÌ 
	»ı±ä´Ù.

    ¹æ¹ı 2) 
	¼Û½ÅÀÚ¿Í ¼ö½ÅÀÚ ÂÊ¿¡¼­ µ¥ÀÌÅÍ¸¦ Ã³¸®ÇÏ±â ½±Áö ¾ÊÀº ¹®Á¦°¡ ÀÖ´Ù.
	Ã¹Â°, ¼Û½ÅÀÚ ÂÊ¿¡¼­´Â µ¥ÀÌÅÍ Áß°£¿¡ EOR°ú ¶È°°Àº ÆĞÅÏÀÌ ÀÖÀ» °æ¿ì¸¦
	Æ¯º°ÇÏ°Ô Ã³¸®ÇØ ÁÖ¾î¾ß ÇÑ´Ù.
	µÑ¤Š, ¼ö½ÅÀÚ ÂÊ¿¡¼­´Â µ¥ÀÌÅÍ¸¦ ÇÑ ¹ÙÀÌÆ®¾¿ ÀĞ¾î¼­ Ã³¸®ÇØ¾ß ÇÔÀ¸·Î 
	È¿À²¼ºÀÌ ¶³¾îÁø´Ù.
	¶ÇÇÑ µ¥ÀÌÅÍ¿¡ ¼ÓÇÑ EORÀÎÁö, °æ°è¸¦ ³ªÅ¸³»´Â EORÀÎÁö ±¸ºĞÇÏ´Â
	ÀÛ¾÷µµ ÇÊ¿äÇÏ´Ù.

    ¹æ¹ı 3)
	±¸ÇöÇÏ±âµµ ½±°í È¿À²¼ºµµ ³ôÀ¸¹Ç·Î ÀÏ¹İÀûÀ¸·Î ¸¹ÀÌ »ç¿ëÇÑ´Ù.

   

    (3) ¹ÙÀÌÆ® Á¤·Ä
	ÀÌ±âÁ¾ °£ ½Ã½ºÅÛ »çÀÌ µ¥ÀÌÅÍ ±³È¯½Ã ¹ÙÀÌÆ® Á¤·Ä ¹æ½ÄÀ» ÅëÀÏÇØ¾ß 
	ÇÑ´Ù.
	Æ¯º°ÇÑ ÀüÁ¦°¡ ¾ø´Ù¸é ºò ¿£µğ¾È ¹æ½ÄÀ¸·Î ÅëÀÏÇÏ´Â °ÍÀÌ ÁÁ´Ù.

    (4) ¸É¹ö Á¤·Ä
	struct MyMessage
	{
		int a;	// 4
		char b;	// 1	 
		int c;	// 4
		char d;	// 1
	};
	sizeof => 16ÀÌ ³ª¿Â´Ù.
	-> ¾çÂÊÀÌ µ¿ÀÏÇÑ ±¸Á¶Ã¼ ¸É¹ö Á¤·Ä ¹æ½ÄÀ» »ç¿ëÇÑ´Ù¸é ¹®Á¦°¡ µÇÁö ¾Ê
	´Â´Ù.
	Æ¯º°ÇÑ ÀÌÀ¯·Î ÀÎÇØ Á¤È®È÷ 10byte¸¦ º¸³»·Á ÇÑ´Ù¸é ´ÙÀ½°ú °°ÀÌ ÄÄÆÄ
	ÀÏ·¯¿¡°Ô ¸í·ÉÀ» »ç¿ëÇÏ¸é µÈ´Ù.
	#pragma pack(1)	// ¸É¹ö Á¤·Ä ¹æ½Ä ÀüÈ¯ : 1byte °æ°è 
	struct MyMessage
	{
		int a;	// 4
		char b;	// 1	 
		int c;	// 4
		char d;	// 1
	};
	#pragma pack()		// µğÆúÆ® ¸É¹ö Á¤·Ä ¹æ½ÄÀ¸·Î º¹±Í 

   => ÀüÃ¼ º¯°æµµ °¡´É -> ºñ±ÇÀå
      Project => setting => C/C++ => Code generation => 
	  struct member alignment



  [ ¿ä¾à ]
/*
1. TCP ¼­¹ö¿¡ TCP Å¬¶óÀÌ¾ğÆ®°¡ Á¢¼ÓÇÏ¸é ¸Å¹ø »õ·Î¿î ¼ÒÄÏÀÌ »ı¼ºµÇ¸ç, 
   ÀÌ ¼ÒÄÏÀÌ ½ÇÁ¦ µ¥ÀÌÅÍ Àü¼Û¿¡ »ç¿ëµÈ´Ù.
2. TCP/IP ¸¦ ÀÌ¿ëÇÏ¿© ¾ÖÇÃ¸®ÄÉÀÌ¼ÇÀÌ Åë½ÅÀ» ¼öÇàÇÏ±â À§ÇØ¼­´Â ÇÁ·ÎÅäÄİ,
   Áö¿ª IP ÁÖ¼Ò¿Í Áö¿ª Æ÷Æ®¹øÈ£, ¿ø°á IP ÁÖ¼Ò¿Í ¿ø°İ Æ÷Æ®¹øÈ£µîÀÌ
   °áÁ¤µÇ¾î¾ß ÇÑ´Ù.

3. TCP ¼­¹öÀÇ ÁÖ¿ä ÇÔ¼ö´Â 
   socket(), bind(), listen(), accept(), recv(), send(), 
   closesocket() ÀÌ´Ù.
4. bind() ÇÔ¼ö´Â ¼­¹öÀÇ Áö¿ª IP ÁÖ¼Ò¿Í Áö¿ª Æ÷Æ® ¹øÈ£¸¦ °áÁ¤ÇÑ´Ù.
5. listen() ÇÔ¼ö´Â ¼ÒÄÏ°ú °áÇÕµÈ TCP Æ÷Æ® »óÅÂ¸¦ LISTENNINGÀ¸·Î 
   ¹Ù²Û´Ù.
6. accept() ÇÔ¼ö´Â ¼­¹ö¿¡ Á¢¼ÓÇÑ Å¬¶óÀÌ¾ğÆ®¿Í Åë½ÅÇÒ ¼ö ÀÖµµ·Ï
   »õ·Î¿î ¼ÒÄÏÀ» »ı¼ºÇÏ¿© ¸®ÅÏÇÑ´Ù.
7. TCP Å¬¶óÀÌ¾ğÆ®ÀÇ ÁÖ¿ä ÇÔ¼ö´Â socket(), connect(), recv(), send(), 
   closesocket()ÀÌ´Ù.

8. connect() ÇÔ¼ö´Â Å¬¶óÀÌ¾ğÆ®°¡ ¼­¹ö¿¡°Ô Á¢¼ÓÇÏ¿© TCP ÇÁ·ÎÅäÄİ 
   ¼öÁØÀÇ ¿¬°áÀÌ ÀÌ·ç¾îÁöµµ·Ï ÇÑ´Ù.
9. send()ÇÔ¼ö´Â ¾ÖÇÃ¸®ÄÉÀÌ¼Ç µ¥ÀÌÅÍ¸¦ ¼Û½Å ¹öÆÛ¿¡ º¹»çÇÔÀ¸·Î½á 
   ±Ã±ØÀûÀ¸·Î ÇÏºÎ ÇÁ·ÎÅäÄİ¿¡ ÀÇÇØ(TCP/IP) µ¥ÀÌÅÍ°¡ Àü¼ÛµÇµµ·Ï ÇÑ´Ù.
10. sned() ÇÔ¼ö´Â Ã¹¹øÂ° ÀÎÀÚ·Î »ç¿ëÇÑ ¼ÒÄÏÀÇ Æ¯¼º(ºí·¯Å·, ³Íºí·¯Å·)
  ¿¡ µû¶ó µÎ Á¾·ùÀÇ ¼º°øÀûÀÎ ¸®ÅÏÀ» ÇÒ ¼ö ÀÖ´Ù.
11. recv() ÇÔ¼ö´Â ¼ö½Å ¹öÆÛ¿¡ µµÂøÇÑ µ¥ÀÌÅÍ¸¦ ¾ÖÇÃ¸®ÄÉÀÌ¼Ç ¹öÆÛ·Î 
   º¹»çÇÑ´Ù.

12. recv() ÇÔ¼ö´Â »óÈ²¿¡ µû¶ó µÎ Á¾·ùÀÇ ¼º°øÀûÀÎ ¸®ÅÏÀ» ÇÒ ¼ö ÀÖ´Ù.
13. ¾ÖÇÃ¸®ÄÉÀÌ¼Ç ÇÁ·ÎÅäÄİÀº ¾ÖÇÃ¸®ÄÉÀÌ¼Ç ¼öÁØ¿¡¼­ ÁÖ°í¹Ş´Â µ¥ÀÌÅÍÀÇ 
   Çü½Ä°ú ÀÇ¹Ì ±×¸®°í Ã³¸® ¹æ½Ä µîÀ» Á¤ÀÇÇÑ ÇÁ·ÎÅäÄİÀÌ´Ù.
14. TCP ¿Í °°ÀÌ ¸Ş½ÃÁöÀÇ °æ°è ±¸ºĞÀ» ÇÏÁö ¾Ê´Â ÇÁ·ÎÅäÄİÀ» »ç¿ëÇÒ °æ¿ì,
    ¾ÖÇÃ¸®ÄÉÀÌ¼Ç ¼öÁØ¿¡¼­ ÀÌ¸¦ Ã³¸®ÇØ¾ß ÇÑ´Ù.
15. ¼­·Î ´Ù¸¥ ¹ÙÀÌÆ® Á¤·Ä ¹æ½ÄÀ» »ç¿ëÇÏ´Â ½Ã½ºÅÛ »çÀÌ¿¡ µ¥ÀÌÅÍ¸¦ 
   ±³È¯ÇÒ ¶§´Â ¹ÙÀÌÆ® Á¤·Ä ¹æ½ÄÀ» ÅëÀÏÇØ¾ß ÇÑ´Ù.
16.¸É¹ö Á¤·ÄÀÌ¶õ ±¸Á¶Ã¼ ¸É¹öÀÇ ½ÃÀÛ ÁÖ¼Ò¿¡ ´ëÇÑ Á¦¾à »çÇ×À» 
   ÀÇ¹ÌÇÑ´Ù. ¾çÂÊ ÇÁ·Î±×·¥ÀÌ µ¿ÀÏÇÑ ±¸Á¶Ã¼ ¸É¹ö Á¤·Ä ¹æ½ÄÀ» »ç¿ëÇÏÁö 
   ¾ÊÀ» °æ¿ì ¹®Á¦°¡ µÉ ¼ö ÀÖ´Ù.
*/