/******************************************************************

  Chapter 1. 윈속에 대한 소개 (UDP)

	5) 데이터 수신  
	6) example
******************************************************************/


//-------------------------------------------------
// 5) 브로드 캐스팅 
//-------------------------------------------------
/*
   TCP 와 구별되는 UDP 의 독특한 특징은 브로드케스팅과 
   멀티 캐스팅을 지원하다는 것이다. 
   이를 이용하면 다자간 통신을 쉽게 구현할 수 있다.


   1) 유니 케스팅( unicasting)
	  가장 흔한 형태로, 두 애플리케이션이 통신하는 모델

   2) 브로드 케스팅(broadcasting)
	  한 네트워크에 속한 모든 개체와 통신하는 모델

   3) 멀티 캐스팅(multicasgin)
     하나 또는 여러 네트워크에 속한 선별된 개체와 통신하는 모델
	  브로드캐스팅은 멀티캐스팅의  특수한 경우에 속함 



1) 동작 원리 
   
   브로드캐스팅은 송신자가 데이터 복사본을 여러 개 보내는 것이 아닌
   오직 하나의 데이터만 보내는 것이다.
   이를 다수가 받게 된다. 

   송신자가 보낸 하나의 메시지는 이더넷을 통해 모든 수신자에게 전달
   되고, 수신자는 이 메시지가 브로드캐스트 주소로 보낸 것임을 알고 
   읽어 들인다.



   소켓 애플리케이션에서 브로드캐스트 데이터를 보내는 절차 
   
   1) 소켓에 대해 브로드캐스팅을 활성화 
      
	  BOOL bEnable	= TRUE;
	  retval		= setsockopt( sock, SOL_SOCKET, SO_BROADCAST,
						(char*)&bEnable, sizeof(bEnable));

      if( retval == SOCKET_ERROR) err_quit("setsockopt() ");


      => socket() 함수로 생성한 소켓 디스크립터는 기본적으로 
	     유니캐스팅만 가능

         1인자 : 소켓
		 2인자,3인자,4인자 : 해당 소켓에 대한 브로드캐스티잉 활성화 
		 이 때부터 브로드캐스트 데이터 전송 가능


   2) 브로드캐스트 주소로 데이터를 전송
      
	  // 소켓 주소 구조체를 초기화 
	  SOCKADDR_IN		remoteaddr;
	  ZeroMemory(&remoteaddr, sizeof(remoteaddr));
	  remoteaddr.sin_family		= AF_INET;
	  remoteaddr.sin_port		= htons(9000);
	  remoteaddr.sin_addr.s_addr= htonl(INADDR_BROADCAST);

      // 보낼 데이터를버퍼에 저장
	  char buf[BUFSIZE];
		
      ...

      // 데이터 전송

      retval = sendto( sock, buf, strlen(buf), 0, 
				(SOCKADDR*)&remoteaddr, sizeof(remoteaddr));

      if( retval == SOCKET_ERROR)	오류 처리;
	  printf("%d바이트를 보냈다\n", retval);


      브로드 캐스트 데이터를보내는 코드는 IP 주소 부분을 제외하면
	  유니캐스트 데이터를 보내는 것과 동일 
	  따라서 브로드캐스트를 위한 IP 주소 설정 방법만 알아두면 됨

      

      [ 실 습 ]

	  사용자가 입력한 문자열을 지역 브로드캐스트 주소로 보냄
	
	  송신자 : 사용자가 키보드로 입력한 문자열을(fgets) 브로드캐스트 
	           주소로 보낸다.(sendto)

      수신자 : 브로드캐스트 데이터를받아(recvfrom) , 이를 문자열로 
	           간주하여 무조건 화면에 출력한다.(printf)


       =>브로드 케스팅을 활성화 하는 코드를 제거하면 오류 발생된다. 



  [ 요 약 ]

 1. UDP 특징을 소켓 함수 관점에서 정리

    1) 연결을 하지 않으므로 connect 함수를 사용하지 않는다.
	2) 데이터 경계 구분을 위한 작업을 애플리케이션이 하지 않아도 된다.
	3) 프로토콜 수준에서 신뢰성 있는 데이터 전송을 보장하지 않으므로,
	   필요하다면 애플리케이션 수준에서 신뢰성 있는 데이터 전송 기능을
	   구현해야 한다.
    4) 간단한 소켓 함수 호출 절차만 따르면 다자 간 통신을 쉽게 구현할 
	   수 있다.

2. UDP 서버는 하나의 소켓으로 다수의 클라이언트와 통신을 할 수 있다. 
   마찬가지로 UDP 클라이언트는 하나의 소켓으로 다수의 서버와 통신할 수
    있다.

3. UDP/IP 를 이용하여 애플리케이션이 통신을 수행하기 위해서는 프로토콜,
   지역 IP PORT , 운격 IP, PORT 등이 결정되어야 한다.

4. sendto() 함수는 하부 프로토콜을 이용하여 애플리케이션 데이터를 
   보낸다.
   sendto() 함수를 호출할 때 소켓의 지역 IP 주소와 PORT 가 아직 
   결정되지 않은 상태라면 시스템이 자동으로 결정한다.

5. recvfrom() 함수는 수신 버퍼에 도착한 데이터를 애플리케이션 버퍼로 
   복사하는 역할을 한다.

6. UDP 서버의 주요 함수는 socket(), bind(), recvfrom(), sendto(), 
   closesocket()

7. UDP 클라이언트의 주요 함수는 socket(), sendto(), recvfrom(), 
   closesocket()

8. 유니캐스팅은 가장 흔한 형태로 두 애플리케이션이 통신하는 모델임

9. 브로드캐스팅은 한 네트워크에 속한 모든 개체와 통신하는 모델

10. 멀티캐스팅은 하나 또는 여러 네트웤에 속한 선별된 개체와 통신하는 
    모델임

11. 소켓 애플리케이션에서 브로드캐스트 데이터를 보내는 절차 
   1) 소켓에 대해 브로드캐스팅을 활성화한다.
   2) 브로드캐스트 주소로 데이터를 보낸다.
*/



//-------------------------------------------------
// 6) example
//-------------------------------------------------
/*
1. 현재 시각을 알려주는 UDP 서버 작성
2. 브로드캐스팅을 이용한 설문 조사 프로그램을 콘솔 애플리케이션
   형태로 작성
   - 설문 항목은 1 ~ 4 중 하나를 선택할 수 있도록 
*/






