/**************************************************************

 [ 전통적인 방식의 예외 처리 방식 ]

  프로그램 실행 중에 하드웨어 또는 소프트웨어적으로 발생하는 것으로 
  어플리케이션에서 이것을 처리하지 않았을 때 에러를 발생시킬 가능성을 갖고 있는 
       것을 말함 
  하드웨어 예외 : 컴퓨터에 하드웨어가 연결되어 있지 않을 경우
				  잘못된 메모리 영역 접근 할 경우
  소프트웨어예외: 함수에 잘못된 매개변수를 넘겨줄 경우 등


  전통적인 예외(에러)의 처리 방식
   - 프로그램의 종료(abort()호출)
   - 에러 코드 값의 반환
   - 정상적인 값을 반환토록 하여 정상적으로 프로그램을 진행하거나 
     비정상적으로 동작시킴
   - 에러 처리 함수 호출

  문제점
  - 정상적인 프로그램 수행 코드와 에러 처리 코드의 경계가 불분명함
  - 에러 상황에 대한 정보를 얻기 어려움
  - 에러에 대한 체계적인 관리 방법 부재

**************************************************************/


//[예제] 나눗셈에서 0으로 나누는 
//       예외에 대한 전통적인 처리 방식

#include <iostream.h>
#include <stdlib.h>

double divide(double, double);

int main(void)
{
    double d1 = 10, d2 = 20;
    cout << d1 << " / " << d2 << " = " << divide(d1,d2) << endl;

    d2 = 0;
    cout << d1 << " / " << d2 << " = " << divide(d1,d2) << endl;

    return 0;
}

double divide(double n, double m)
{
    if (m == 0)
	      abort();
    return n/m;
}
