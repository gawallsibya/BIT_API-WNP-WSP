[ 서비스 ]


- 시스템이 시작할때부터 종료될 때까지 계속 실행되는 프로그램 

- 사용자가 로그온되어 있지 않을 경우도 작동되는 프로그램

- 특정 규칙에 따라 만들어진 콘솔 프로그램이다.



[ SCM : 서비스 실행 제어 ]

- 서비스 제어 매니저(Service Control Manager)

  부팅시 시작되는 시스템 프로그램의 일종
  
  서비스를 제공하는 프로그램의 등록, 시작, 종료, 삭제 등과 같은
  모든 관리를 담당함

  사용자나 다른 프로그램이 서비스를 조작할 경우에는 반드시 SCM을
  통한다.




  서비스 관리   <----설정       서비스제어메니져		<--(제어/설정) 서비스 애플릿(windows에서 제공)
  데이터베이스
  (레지스트리)  가져오기-->          (SCM)				<--(제어) 서비스 제어 프로그램(구현)

									 |  |				<--(설정) 서비스 설정 프로그램(구현)

   
                              서비스 프로그램의 시작및 실행 제어 


- 서비스 애플릿
   서비스 프로그램의 설치/제거 외의 모든 기능 제공(제어/설정)

- SCM에서 새로운 서비스 프로그램을 인식하기 위해서는 등록과정을 거쳐야 함
  이는 서비스 프로그램을 제공하는 측에서 준비해야 함

- SCM은 등록된 서비스의 정보를 관리 DB에 보존함

   HKEY_LOCAL_MACHINE\SYSTEM\CURRENTCONTROLSET\SERVICES


- 서비스는 서비스 전용 사용자 계정에서 실행된다.



[ main 함수에서 서비스 진입점을 등록한다. ]

ex1) 정기적으로 Beep음을 울리는 BeepService 구현

- 서비스 프로그램은 백그라운드에서 동작함
  따라서 기본적으로 콘솔 프로그램임

- 서비스로 기능하기 위해서는 SCM의 제어에 응답할 수 있는
  구조가 구현되어 있어야 함 

- SCM에 의한 호출 시나리오

  1) 서비스 애플릿의 '시작' 메뉴 선택해서 서비스 시작 지시
  2) SCM은 등록 정보를 기반으로 서비스 프로그램의 프로세스 생성
     main함수를 호출 

  3) main함수는 최대한 신속하게 StartServiceCtrlDispatcher API함수를
     호출해야 함 
	 - 이 함수는 서비스가 정지할때까지 제어권을 돌려주지 않는다.


	 #include <windows.h>

	 int main()
	 {
		SERVICE_TABLE_ENTRY services[] = {
		{"BeepService", BeepServiceMain },
		{NULL, NULL}
		};

		if( !StartServiceCtrlDispatcher(services))
		{
		 MessageBox(NULL, 
		 "BeepService 서비스에서 에러 발생",
		 "BeepService에러", MB_OK |MB_ICONERROR |
		 MB_SERVICE_NOTIFICATION);
		}
		return 0;
	 }

	 ==> StartServiceCtrlDispatcher는 프로그램의 실행을 SCM내의 
	     코드로 옮겨서 서비스를 제어할 수 있도록 한다.

		 이때 프로그램 내부에 있는 서비스 진입점을 
		 SERVICE_TABLE_ENTRY 구조체에 설정해서 인자로 넘긴다.
		 이 구조체의 맴버에는 서비스 명과 진입점이 되는 함수 포인터가
		 있다.
		 - 여기서 지정하는 함수는 ServiceMain이라 함

		 즉, StartServiceCtrlDispatcher API를 호출하면
		 SCM은 새롭게 스레드를 생성해서 ServiceMain함수를 호출한다.
		 이제부터가 서비스 본래의 처리를 시작하는 부분이다.


	 ==> SERVICE_TABLE_ENTRY 는 배열이다.
	     실행 파일 하나에서 여러 개의 서비스를 제공할 수 있도록하기 위함임


		 여러개의 서비스를 준비했어도 실제로 ServiceMain이 호출되는 것은
		 서비스 애플릿에서 지정한 서비스뿐임


[ 실질적인 처리는 ServiceMain함수에서 한다. ]


#define BEEPSERVICE_NAME	"BoopService"
SERVICE_STATUS_HANDLE g_ssh = NULL;
HANDLE g_event = NULL;
HANDLE g_event2 = NULL;
DWORD g_state = SERVICE_STOPPED;

void WINAPI BeepServiceMain( DWORD dwArgc, LPTSTR *lpszArgv)
{

	//1. SCM에 제어 핸들러를 등록하기 위한 API---------------------------------
	//   - SCM은 서비스를 제어할 필요가 생겼을 때 이 제어 핸들러를 호출하는
	//     방법으로 서비스에 통지한다.
	//     이것이 등록되어야  SCM이 서비스 프로그램을 제어할 수 있다.
	g_ssh = RegisterServiceCtrlHandler(
		BEEPSERVICE_NAME, BeepServiceHandler);
	if(g_ssh == NULL)
	{
		MessageBox(NULL, 
			"BeepService를 시작할 수 없습니다.",
			"BeepService에러", MB_OK|MB_ICONERRRO|
			MB_SERVICE_NOTIFICATION);
			return;
	}

	//이벤트 객체 생성, 초기 상태는 리셋
	g_event = CreateEvent(NULL, FALSE, FALSE, NULL);
	g_event2= CreateEvent(NULL, FALSE, FALSE, NULL);
	g_state = SERVICE_RUNNING;

	// 초기화 종료 보고
	SERVICE_STATUS status = {
		SERVICE_WIN32_OWN_PROCESS,			// 서비스 종류 
		SERVICE_RUNNING,					// 서비스 상태 
		SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_PAUSE_CONTINUE,	// 수신 가능한 제어코드 
			0, 0, 0, 0)};


	// 2. 서비스가 시작 상태가 된것을 SCM에 통지한다.-----------------
	SetServiceStatus(g_ssh, &status);

	OutputDebugString("BeepService 서비스가 시작되었습니다.\n");



	// 3. 서비스 본연의 임무 수행 ----------------------------------- 
	//서비스 중, 2초마다 비프음
	while(1)
	{
		Beep(440, 200); // 440Hz 0.2초

		// 제어 통지를 최대 2초간 대기
		if( WaitForSingleObject(g_event, 2000) == WAIT_TIMEOUT)
			continue;

		// 일시 정지 통지가 있으면재개/정지 대기
		while( g_state == SERVICE_PAUSED)
		{
			SetEvent(g_event2);	// 제어 완료 통지
			WaitForSingleObject(g_event, INFINITE);
		}

		if( g_state == SERVICE_RUNNING)
			SetEvent(g_event2);	// 제어 완료 통지 
		else if( g_state == SERVICE_STOPPED)
			break;
	}

	OutputDebugString(
	"BeepService 서비스가 중지되었습니다.");

	SetEvent(g_event2);		// 제어 완료 통지 
}



[ 제어 핸들러로 SCM에서송신하는 제어 코드에 응답한다. ]


void WINAPI BeepServiceHandler(DWORD fdwControl)
{
	char buf[256];

	SERVICE_STATUS status = {
		SERVICE_WIN32_OWN_PROCESS,			// 서비스 종류 
		SERVICE_RUNNING,					// 서비스 상태 
		SERVICE_ACCEPT_STOP | SERVICE_ACCEPT_PAUSE_CONTINUE,	// 수신 가능한 제어코드 
			0, 0, 0, 0)};

	switch( fdwControl )
	{
		case SERVICE_CONTROL_PAUSE:
			g_state = SERVICE_PAUSED;
			OutputDebugString("일시정지\n");
			SetEvent(g_event);
			WaitForSingleObject(g_event2, INFINITE);
			break;
		case SERVICE_CONTROL_CONTINUE:
			g_state = SERVICE_RUNNING;
			OutputDebugString("재시작\n");
			SetEvent(g_event);
			WaitForSingleObject(g_event2, INFINITE);
			break;
		case SERVICE_CONTROL_STOP:
			g_state = SERVICE_STOPPED;
			OutputDebugString("중지\n");
			SetEvent(g_event);
			WaitForSingleObject(g_event2, INFINITE);
			break;
		case SERVICE_CONTROL_INTERROGATE:	// 서비스 최신상태 보고
			break;
		default:
			sprintf(buf, "지원하지 않는 제어코드 : 0x%081x\n", fdwControl);

			OutputDebugString(buf);

	}
	status.dwCurrentState = g_state;
	SetServiceStatus(g_ssh, &status);

	return;
}



[ 서비스 설치 /제거  ]

생성한 서비스를 SCM을 사용해서 외부 프로그램에서 조작하는 방법

1) 서비스의 설치와 제거
2) 서비스의 시작/정지를 다루는 실행 제어
3) 서비스의 설정 변경

void install(void)
{

	// SCM 핸들 얻기 
	// 1인자 : 컴퓨터명 (네트엌에 연결된 각각의 컴퓨터를 식별하기 위한 이름)
	//         NULL 로컬로 지정 
	// 2인자 : SCM의 관리 데이터베이스의 이름 : 보통 NULL 사용 
	// 3인자 : 접근 권한 
	SC_HANDLER scm = OpenSCManager(NULL, NULL, 
			SC_MANAGER_ALL_ACCESS);

	if( scm == NULL )
	{
		fprintf(stderr, "SCM을 열 수 없습니다.");
		return;
	}

	SC_HANDLER scv = CreateService(
		scm,				// SCM핸들
		BEEPSERVICE_NAME,	// 서비스 명
		"BeepService",		// 서비스 출력명
		SERVICE_ALL_ACCESS,	// 필요한 접근 권한
		SERVICE_WIN32_OWN_PROCESS,		// 서비스 종류
		SERVICE_AUTO_START,				// 시작 방법
		SERVICE_ERROR_NORMAL,			// 에러 발생시 대처 방법

		"c:\\bin\\beepService.exe",		// 서비스 경로명

		NULL,		// 로드 순서 그룹 지정
		NULL,		// 로드 순서 그룹 내의 태그를 받는다.
		NULL,		// 의존하는 서비스명 리스트
		NULL,		// 계정 ID
		NULL,		// 암호

		);

	if( scv != NULL )
	{
		CloseHandle(scv);
		printf("서비스가 설치되었습니다.\n");
	}
	else
	{
		fprintf(stderr,"서비스가 설치되지 않았습니다\n");
	}

	CloseServiceHandle(scm);
}


void uninstall(void)
{
	SC_HANDLER scm = OpenSCManager(NULL, NULL, 
			SC_MANAGER_ALL_ACCESS);

	if( scm == NULL )
	{
		fprintf(stderr, "SCM을 열 수 없습니다.");
		return;
	}
	SC_HANDLER scv = OpenService(
		scm,				// SCM핸들
		BEEPSERVICE_NAME,	// 서비스 명
		DELETE
		);

	if( scv != NULL )
	{
		if( !DeleteService(scv)
		{
			printf("서비스를 삭제할 수 없습니다.\n");
		}
		else
		{
			CloseServiceHandle(scv);	
			printf(서비스가 삭제되었습니다.\n");
		}
	}
	else
	{
		fprintf(stderr, 
				"서비스를 열 수 없습니다\n");
	}

	CloseServiceHandle(scm);	
}



[ 프로그램에서 서비스를 제어   ]

- 서비스 애플리릿에서 수행

- 독자적인 프로그램을 사용해서 제어 


//--------------------------

예제 확인


1) 서비스 프로그램			: MemStatService

2) 서비스 제어 프로그램		: MemStatControl

3) 서비스 등록/제거 프로그램 : MemStatConfig