/*
//--------------------------------------------------------------------------------

  일반적인 파일 조작 : C / C++ 표준 라이브러리에서 기본함수 제공

  라이브러리 함수 내에서는 Win32API를 사용해서 실행되고 있다.

  따라서 파일 조작은 API레벨에서 이해하는 것이 바람직함

  또한 API를 이용하면 Windows 에서 제공하는 파일 조작 기능을 모두 

  이용할 수 있는 장점이 있다.
//--------------------------------------------------------------------------------


  1) 파일시스템은 파일을 손쉽게 다룰 수 있게 해준다.

     - 파일 시스템은 데이터를 기록하기 위해 섹터를 어떻게 이용할 것인가
	   를 규정한 사양이다.

        *) 섹터 : 크기가 매우 작아서 여러 개의 섹터를 묶어서 하나의 단위로 
		          만드는 경우가 많음
				  FAT16 파일 시스템에서는 2kb-32kb짜리 클러스터 단위로 매체를
				  관리함 

     - 파일 시스템에서는 논리적인 데이터 한 묶음을 파일 하나로 취급한다.

     - 섹터에 신경쓰지 않고 파일명만으로 디스크에 있는 데이터를 다룰 수 있는
	   이유는 파일 시스템 덕분이다.

     
	- 파일은 비휘발성 메모리처럼 전원이 끊어진 상태에서도 데이터를 보존할 수 
	  있고, 접근 속도가 느리기 때문에 메인 메모리로는 사용할 수 없다.

  2) 라이브러리 함수에서는 텍스트 모드에 주의한다.
     - Windows에서 지원하는 파일시스템
	   하드 디스크용 FAT(File Allocation Table)
	                 FAT32,
					 NTFS(NT File System)

	   CD-ROM이나 DVD-ROM에서 사용하는
					 CDFS(CD File Sysem)
					 UDF(Universal Disk Format)등이 있다.


        *) 위의 파일 시스템들은 각각 대상으로 하는 매체가 다르거나 
		   섹터에 데이터나 부가 정보를 기록하는 방법이 다르므로 
		   호환성이 없다.
		   ex) NTFS는 Windows NT/2000/XP에서만 지원하기 때문에 NTFS로 포멧
		       한 하드디스크는 Windows98에 연결해도 사용할 수 없다.

     - 파일 시스템의  종류가 다양한 이유는 각각에 장단점이 있기 때문임

       FAT : MS-DOS시절부터 사용
	         구조가 간단하여 운영체제에 부담이 적다는 장점이 있슴
			 보안과 같은 특별한 기능은 없으며, 단편화가 일어나기 쉽다

       NTFS : 보안이나 암호화/압축 등의 부가 기능이 충분하지만
	          구조가 복잡하기 때문에 Windows 95/98/Me에서는 쓰이지 않는다.


     - 서로 다른 파일시스템을 프로그램 적으로 접근할 경우 
	   공통된 기능을 주로 사용하기 때문에 통일되게 접근이 가능하다.
	   1) 파일을 연다(open)
	   2) 실제로 데이터를 읽고 쓴다.(read/write)
	   3) 파일을 닫는다.(close)

       *) NTFS의 부가 기능처럼 파일시스템의 특유의 기능을 이용하려면 해당
	      코드를 작성해야 함 
		  - Platform SDK 문서 참조 


     - Windows에서 C/C++언어를 사용해 파일을 읽고 쓸 때 가장 간단한 방법은
	   C/C++표준 라이브러리를 사용하는 것임

       ex) fopen/fclose    fread/fwrite   fgets/fputs...

       파일 시스템의 고유 기능을 사용할 수는 없지만 표준 라이브러리 함수를 
	   사용하면 다른 운영체제로 이식하기가 편해진다는 장점을 가지고 있슴 

     - Windows에서 스트림 함수를 사용할 경우 바이너리와 텍스트 모드로 구분됨
	   텍스트 파일의 개행코드가 운영체제마다 다르기 때문임 
	    - Windows : 연속된 2바이트 사용
		    16진수의 0x0d(캐리지 리턴, CR) + 
			         0x0a(라인피드, LF) 사용 

	   - Unix    : LF만 사용 

       *) C/C++ 언어에서는 개행 코드로 '\n'만 사용함 
	      이는 LF에 해당됨 

		  즉, C/C++문자열을 그대로 파일에 출력하면 
		  유닉스환경에서는 올바르게 개행, 
		  윈도우즈 환경에서는 비정상적 출력

		  이를 보완하기 위해 텍스트 모드에서는 '\n'을 써
		  넣으려고 하면 자동으로 CR+LF로 변환해서 저장된다.
		  반대로  CR+LF를 읽으면 '\n'으로 변환된다.

          바이너리 모드는 변환이 전혀 없다.
*/

#include <stdio.h>
#include <string.h>

int main()
{
	const char *buf = "Apple\nOrange\nBanana\n";

	FILE *fpBin, *fpTxt;

	// 바이너리 모드 : 0A
	fpBin = fopen("binary.txt", "wb");
	if( fpBin != NULL)
	{
		fwrite(buf, 1, strlen(buf), fpBin);
		fclose(fpBin);
	}

	// 텍스트 모드 : 0D 0A
	fpTxt = fopen("text.txt","w");
	if( fpTxt != NULL)
	{
		fwrite(buf, 1, strlen(buf), fpTxt);
		fclose(fpTxt);
	}

	return 0;
}

// PE VIEW 로 확인